{"version":3,"sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["import {\n  addDays,\n  addWeeks,\n  lastDayOfMonth,\n  getYear,\n  isSaturday,\n  isSunday,\n  isSameDay,\n} from \"date-fns\";\n\nimport { getFirstOccurence, getLastOfMonth } from \"./utils\";\n\nexport type Holiday =\n  | \"christmas\"\n  | \"easter\"\n  | \"halloween\"\n  | \"valentinesDay\"\n  | \"mothersDay\"\n  | \"columbusDay\"\n  | \"independenceDay\"\n  | \"presidentsDay\"\n  | \"laborDay\"\n  | \"veteransDay\"\n  | \"thanksgiving\"\n  | \"newYearsEve\"\n  | \"martinLutherKingJrDay\"\n  | \"newYearsDay\"\n  | \"fathersDay\"\n  | \"memorialDay\"\n  | \"goodFriday\"\n  | \"juneteenth\";\n\nexport function getHalloween(year: number) {\n  return new Date(year, 9, 31);\n}\n\nexport function getValentinesDay(year: number) {\n  return new Date(year, 1, 14);\n}\n\nexport function getMothersDay(year: number) {\n  return addWeeks(getFirstOccurence(new Date(year, 4), 0), 1);\n}\n\nexport function getJuneteenth(year: number) {\n  return new Date(year, 5, 19);\n}\n\nexport function getEaster(year: number) {\n  if (year < 325) {\n    throw new RangeError(\"Cannot calculate Easter dates before 325 AD.\");\n  }\n\n  function mod(a: number, b: number) {\n    return a % b;\n  }\n\n  function div(a: number, b: number) {\n    const q = a / b;\n    if (q < 0) {\n      throw new Error(\"Unexpected negative q\");\n    }\n    return Math.floor(q);\n  }\n\n  const y = year,\n    skipMarchDays = 21,\n    a = mod(y, 19),\n    b = div(y, 100),\n    c = mod(y, 100),\n    d = div(b, 4),\n    e = mod(b, 4),\n    f = div(b + 8, 25),\n    g = div(b - f + 1, 3),\n    h = mod(19 * a + b - d - g + 15, 30),\n    i = div(c, 4),\n    k = mod(c, 4),\n    l = mod(32 + 2 * e + 2 * i - h - k, 7),\n    m = div(a + 11 * h + 22 * l, 451),\n    t = h + l - 7 * m + skipMarchDays,\n    n = div(t, 31) + 3,\n    p = mod(t, 31);\n\n  return new Date(year, n - 1, p + 1);\n}\n\nexport function getColumbusDay(year: number) {\n  return addWeeks(getFirstOccurence(new Date(year, 9), 1), 1);\n}\n\nexport function getIndependenceDay(year: number) {\n  return new Date(year, 6, 4);\n}\n\nexport function getPresidentsDay(year: number) {\n  return addWeeks(getFirstOccurence(new Date(year, 1), 1), 2);\n}\n\nexport function getChristmas(year: number) {\n  return new Date(year, 11, 25);\n}\n\nexport function getLaborDay(year: number) {\n  return getFirstOccurence(new Date(year, 8), 1);\n}\n\nexport function getVeteransDay(year: number) {\n  return new Date(year, 10, 11);\n}\n\nexport function getThanksgiving(year: number) {\n  return addWeeks(getFirstOccurence(new Date(year, 10), 4), 3);\n}\n\nexport function getNewYearsEve(year: number) {\n  return lastDayOfMonth(new Date(year, 11));\n}\n\nexport function getMartinLutherKingJrDay(year: number) {\n  return addWeeks(getFirstOccurence(new Date(year, 0), 1), 2);\n}\n\nexport function getNewYearsDay(year: number) {\n  return new Date(year, 0, 1);\n}\n\nexport function getFathersDay(year: number) {\n  return addWeeks(getFirstOccurence(new Date(year, 5), 0), 2);\n}\n\nexport function getMemorialDay(year: number) {\n  return getLastOfMonth(new Date(year, 4), 1);\n}\n\nexport function getGoodFriday(year: number) {\n  return addDays(getEaster(year), -2);\n}\n\nexport type Holidays = {\n  [K in Holiday]: {\n    date: Date;\n    bankHoliday: boolean;\n    federal: boolean;\n  };\n};\n\nexport function getHolidays(year: number): Holidays {\n  return {\n    newYearsDay: {\n      date: getNewYearsDay(year),\n      bankHoliday: true,\n      federal: true,\n    },\n    martinLutherKingJrDay: {\n      date: getMartinLutherKingJrDay(year),\n      bankHoliday: true,\n      federal: true,\n    },\n    valentinesDay: {\n      date: getValentinesDay(year),\n      bankHoliday: false,\n      federal: false,\n    },\n    juneteenth: {\n      date: getJuneteenth(year),\n      bankHoliday: year < 2022 ? false : true,\n      federal: true,\n    },\n    easter: {\n      date: getEaster(year),\n      bankHoliday: false,\n      federal: false,\n    },\n    presidentsDay: {\n      date: getPresidentsDay(year),\n      bankHoliday: true,\n      federal: false,\n    },\n    memorialDay: {\n      date: getMemorialDay(year),\n      bankHoliday: true,\n      federal: true,\n    },\n    independenceDay: {\n      date: getIndependenceDay(year),\n      bankHoliday: true,\n      federal: true,\n    },\n    laborDay: {\n      date: getLaborDay(year),\n      bankHoliday: true,\n      federal: true,\n    },\n    goodFriday: {\n      date: getGoodFriday(year),\n      bankHoliday: false,\n      federal: false,\n    },\n    mothersDay: {\n      date: getMothersDay(year),\n      bankHoliday: false,\n      federal: false,\n    },\n    columbusDay: {\n      date: getColumbusDay(year),\n      bankHoliday: true,\n      federal: true,\n    },\n    halloween: {\n      date: getHalloween(year),\n      bankHoliday: false,\n      federal: false,\n    },\n    fathersDay: {\n      date: getFathersDay(year),\n      bankHoliday: false,\n      federal: false,\n    },\n    veteransDay: {\n      date: getVeteransDay(year),\n      bankHoliday: true,\n      federal: true,\n    },\n    thanksgiving: {\n      date: getThanksgiving(year),\n      bankHoliday: true,\n      federal: true,\n    },\n    christmas: {\n      date: getChristmas(year),\n      bankHoliday: true,\n      federal: true,\n    },\n    newYearsEve: {\n      date: getNewYearsEve(year),\n      bankHoliday: false,\n      federal: false,\n    },\n  };\n}\n\nexport function getBankHolidays(year: number): {\n  [key: string]: {\n    date: Date;\n  };\n} {\n  const holidays = getHolidays(year);\n\n  return Object.keys(holidays).reduce((acc, holidayName) => {\n    const holiday = holidays[holidayName as Holiday];\n    if (holiday.bankHoliday) {\n      return {\n        ...acc,\n        [holidayName]: {\n          date: holiday.date,\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n}\n\nexport function getFederalHolidays(year: number): {\n  [key: string]: {\n    date: Date;\n  };\n} {\n  const holidays = getHolidays(year);\n\n  return Object.keys(holidays).reduce((acc, holidayName) => {\n    const holiday = holidays[holidayName as Holiday];\n    if (holiday.federal) {\n      return {\n        ...acc,\n        [holidayName]: {\n          date: holiday.date,\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n}\n\nexport function getObservedHolidays(\n  year: number\n): Record<string, Record<\"date\", Date>> {\n  const holidays = getHolidays(year);\n\n  return Object.keys(holidays)\n    .filter((holidayName) => {\n      if (holidays[holidayName as Holiday].federal) return true;\n      return false;\n    })\n    .reduce((acc, holidayName) => {\n      const holiday = holidays[holidayName as Holiday];\n      if (isSaturday(holiday.date)) {\n        return {\n          ...acc,\n          [holidayName]: {\n            date: addDays(holiday.date, -1),\n          },\n        };\n      }\n      if (isSunday(holiday.date)) {\n        return {\n          ...acc,\n          [holidayName]: {\n            date: addDays(holiday.date, 1),\n          },\n        };\n      }\n\n      return acc;\n    }, {});\n}\n\nexport function isInHolidayList(\n  date: Date,\n  getHolidayList: (year: number) => { [key: string]: { date: Date } }\n): boolean {\n  const holidays = getHolidayList(getYear(date));\n  return (\n    Object.keys(holidays).filter((holidayName) => {\n      return isSameDay(date, holidays[holidayName].date);\n    }).length > 0\n  );\n}\n\nexport function isHoliday(date: Date): boolean {\n  return isInHolidayList(date, getHolidays);\n}\n\nexport function isFederalHoliday(date: Date): boolean {\n  return isInHolidayList(date, getFederalHolidays);\n}\n\nexport function isBankHoliday(date: Date): boolean {\n  return isInHolidayList(date, getBankHolidays);\n}\n","import {\n  getDay as getDayOfWeek,\n  setDate as setDayOfMonth,\n  addDays,\n  lastDayOfMonth,\n} from \"date-fns\";\n\nexport function getFirstOccurence(date: Date, dayOfWeekIndex: number) {\n  return getNextOccurence(setDayOfMonth(date, 1), dayOfWeekIndex);\n}\n\nexport function getNextOccurence(date: Date, dayOfWeekIndex: number) {\n  if (getDayOfWeek(date) === dayOfWeekIndex) {\n    return date;\n  }\n\n  if (getDayOfWeek(date) > dayOfWeekIndex) {\n    date = addDays(date, 7 - getDayOfWeek(date) + dayOfWeekIndex);\n  } else {\n    date = addDays(date, dayOfWeekIndex - getDayOfWeek(date));\n  }\n  return date;\n}\n\nexport function getPrevOccurence(date: Date, dayOfWeekIndex: number) {\n  if (getDayOfWeek(date) === dayOfWeekIndex) {\n    return date;\n  }\n\n  if (getDayOfWeek(date) > dayOfWeekIndex) {\n    date = addDays(date, -1 * (getDayOfWeek(date) - dayOfWeekIndex));\n  } else {\n    date = addDays(date, -1 * (getDayOfWeek(date) - 0 + (7 - dayOfWeekIndex)));\n  }\n  return date;\n}\n\nexport function getLastOfMonth(date: Date, dayOfWeekIndex: number) {\n  return getPrevOccurence(lastDayOfMonth(date), dayOfWeekIndex);\n}\n"],"mappings":"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","names":["import_date_fns","setDayOfMonth","getDayOfWeek","a","b"]}